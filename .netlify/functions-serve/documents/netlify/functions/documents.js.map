{
  "version": 3,
  "sources": ["../../../../Downloads/FAAAA - Copy/netlify/functions/documents.cjs"],
  "sourceRoot": "C:/Users/Atul/AppData/Local/Temp/tmp-3100-AoBxgydImBQZ",
  "sourcesContent": ["\nlet documents = [];\n\nexports.handler = async function(event, context) {\n  const path = event.path.replace('/.netlify/functions', '');\n  const method = event.httpMethod;\n\n  if (path.startsWith('/documents')) {\n    if (method === 'POST') {\n      const newDocument = { id: Date.now(), createdAt: new Date(), ...JSON.parse(event.body) };\n      documents.push(newDocument);\n      console.log('New Document Saved:', newDocument);\n      return {\n        statusCode: 201,\n        body: JSON.stringify(newDocument),\n      };\n    } else if (method === 'GET') {\n      const { documentType, searchTerm } = event.queryStringParameters;\n      let filteredDocuments = documents;\n\n      if (documentType && documentType !== 'All') {\n        filteredDocuments = filteredDocuments.filter(doc => doc.documentType === documentType);\n      }\n\n      if (searchTerm) {\n        const lowerCaseSearchTerm = searchTerm.toLowerCase();\n        filteredDocuments = filteredDocuments.filter(doc => \n          doc.clientName.toLowerCase().includes(lowerCaseSearchTerm) ||\n          doc.documentNumber.toLowerCase().includes(lowerCaseSearchTerm)\n        );\n      }\n\n      return {\n        statusCode: 200,\n        body: JSON.stringify(filteredDocuments),\n      };\n    } else if (method === 'DELETE') {\n      const id = parseInt(path.split('/').pop());\n      const initialLength = documents.length;\n      documents = documents.filter(doc => doc.id !== id);\n      if (documents.length < initialLength) {\n        console.log(`Document with ID ${id} deleted.`);\n        return {\n          statusCode: 200,\n          body: JSON.stringify({ message: 'Document deleted successfully.' }),\n        };\n      } else {\n        return {\n          statusCode: 404,\n          body: JSON.stringify({ message: 'Document not found.' }),\n        };\n      }\n    }\n  }\n\n  return {\n    statusCode: 404,\n    body: 'Not Found',\n  };\n};\n"],
  "mappings": ";AACA,IAAI,YAAY,CAAC;AAEjB,QAAQ,UAAU,eAAe,OAAO,SAAS;AAC/C,QAAM,OAAO,MAAM,KAAK,QAAQ,uBAAuB,EAAE;AACzD,QAAM,SAAS,MAAM;AAErB,MAAI,KAAK,WAAW,YAAY,GAAG;AACjC,QAAI,WAAW,QAAQ;AACrB,YAAM,cAAc,EAAE,IAAI,KAAK,IAAI,GAAG,WAAW,oBAAI,KAAK,GAAG,GAAG,KAAK,MAAM,MAAM,IAAI,EAAE;AACvF,gBAAU,KAAK,WAAW;AAC1B,cAAQ,IAAI,uBAAuB,WAAW;AAC9C,aAAO;AAAA,QACL,YAAY;AAAA,QACZ,MAAM,KAAK,UAAU,WAAW;AAAA,MAClC;AAAA,IACF,WAAW,WAAW,OAAO;AAC3B,YAAM,EAAE,cAAc,WAAW,IAAI,MAAM;AAC3C,UAAI,oBAAoB;AAExB,UAAI,gBAAgB,iBAAiB,OAAO;AAC1C,4BAAoB,kBAAkB,OAAO,SAAO,IAAI,iBAAiB,YAAY;AAAA,MACvF;AAEA,UAAI,YAAY;AACd,cAAM,sBAAsB,WAAW,YAAY;AACnD,4BAAoB,kBAAkB;AAAA,UAAO,SAC3C,IAAI,WAAW,YAAY,EAAE,SAAS,mBAAmB,KACzD,IAAI,eAAe,YAAY,EAAE,SAAS,mBAAmB;AAAA,QAC/D;AAAA,MACF;AAEA,aAAO;AAAA,QACL,YAAY;AAAA,QACZ,MAAM,KAAK,UAAU,iBAAiB;AAAA,MACxC;AAAA,IACF,WAAW,WAAW,UAAU;AAC9B,YAAM,KAAK,SAAS,KAAK,MAAM,GAAG,EAAE,IAAI,CAAC;AACzC,YAAM,gBAAgB,UAAU;AAChC,kBAAY,UAAU,OAAO,SAAO,IAAI,OAAO,EAAE;AACjD,UAAI,UAAU,SAAS,eAAe;AACpC,gBAAQ,IAAI,oBAAoB,EAAE,WAAW;AAC7C,eAAO;AAAA,UACL,YAAY;AAAA,UACZ,MAAM,KAAK,UAAU,EAAE,SAAS,iCAAiC,CAAC;AAAA,QACpE;AAAA,MACF,OAAO;AACL,eAAO;AAAA,UACL,YAAY;AAAA,UACZ,MAAM,KAAK,UAAU,EAAE,SAAS,sBAAsB,CAAC;AAAA,QACzD;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AAAA,IACL,YAAY;AAAA,IACZ,MAAM;AAAA,EACR;AACF;",
  "names": []
}
